@using Microsoft.EntityFrameworkCore.Scaffolding
@using YateMate.Aplicacion.UseCases.ApplicationUser
@using YateMate.Aplicacion.UseCases.Subalquiler
@using YateMate.Aplicacion.UseCases.Reserva
@using YateMate.Aplicacion.UseCases.Publicaciones
@using YateMate.Components.Account.Shared
@inject NavigationManager NavigationManager
@inject EmailSender EmailSender
@inject CancelarReservaUseCase CancelarReservaUseCase
@inject ObtenerDuenioSubalquilerUseCase ObtenerDuenioSubalquilerUseCase
@inject ObtenerDuenioReservaUseCase ObtenerDuenioReservaUseCase
@inject ObtenerContactosDeUseCase ObtenerContactosDeUseCase
@inject NavigationManager Navegador;
@inject IDialogService Dialog

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Align="Align.Center">
            Viendo datos
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudCard Elevation="0">
            <MudCardContent>
                <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">Amarra Nº @Subalquiler.IdAmarra</MudText>
                <MudText Typo="Typo.body1" Align="Align.Center">Desde: @Reserva.FechaInicio.ToString("d")</MudText>
                <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-4">Hasta: @Reserva.FechaFin.ToString("d")</MudText>
                @{
                    duenio = ObtenerDuenioSubalquilerUseCase.Ejecutar(Subalquiler.IdDuenio);
                }
                <MudText Typo="Typo.body2" Color="Color.Info" Align="Align.Center">
                    @duenio.Nombre @duenio.Apellido
                    <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Class="ml-1"/>
                </MudText>
            </MudCardContent>
        </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="Cancel">Cerrar</MudButton>
        <MudSpacer />
        @if (!Subalquiler.EstaEliminado)
        {
            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Edit"
                       OnClick="@(() => EditarReserva(Reserva))"
                       Color="Color.Primary"
                       Size="Size.Small">Editar
            </MudButton>
        }
        <MudButton Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Delete"
                   OnClick="CancelarHandler"
                   Color="Color.Error"
                   Size="Size.Small">Cancelar reserva
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public Subalquiler Subalquiler { get; set; } = null!;
    [Parameter] public Reserva? Reserva { get; set; }
    
    [CascadingParameter] 
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private string? _userId;
    List<ApplicationUser> _contactos = new List<ApplicationUser>();
    ApplicationUser duenio;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState.User;
            _userId = user.Claims.FirstOrDefault()?.Value;
            _contactos = ObtenerContactosDeUseCase.Ejecutar(_userId);
        }
    }
    
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    void Submit() => MudDialog!.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog!.Cancel();
    
    public void EditarReserva(Reserva reserva)
    {
        var parameters = new DialogParameters<EditarReserva>();
        parameters.Add(x => x.Reserva, reserva);
        parameters.Add(x=>x.Subalquiler,Subalquiler);
        Dialog.Show<EditarReserva>("Editar", parameters);
    }
    
    
    [Inject] private IDialogService? DialogService { get; set; }

    async Task CancelarHandler()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Cancelar", 
            $"¿Desea confirmar la cancelación de la reserva al subalquiler de la amarra Nº{Subalquiler.IdAmarra}?", 
            yesText:"Confirmar", cancelText:"Salir");
        StateHasChanged();
        if (result is true)
        {
            CancelarReservaUseCase.Ejecutar(Reserva.Id);
            var mailDuenio = ObtenerDuenioSubalquilerUseCase.Ejecutar(Subalquiler.IdDuenio).Email;
            var duenioReserva = ObtenerDuenioReservaUseCase.Ejecutar(Reserva.UsuarioId);
            // await EmailSender.SendMessageCancelacion(mailDuenio, Reserva, duenioReserva,Subalquiler);
            NavigationManager.NavigateTo($"/ListadoMisReservas", true);
        }
    }

}