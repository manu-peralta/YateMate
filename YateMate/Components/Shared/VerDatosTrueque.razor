@using YateMate.Aplicacion.UseCases.ApplicationUser
@using YateMate.Aplicacion.UseCases.Bien
@using YateMate.Aplicacion.UseCases.Embarcaciones
@using YateMate.Aplicacion.UseCases.Oferta
@using YateMate.Aplicacion.UseCases.Publicaciones
@using YateMate.Components.Pages
@using YateMate.Aplicacion.UseCases.TruequesConfirmados

@inject RetrotraerTruequeUseCase RetrotraerTruequeUseCase
@inject ObtenerBienUseCase ObtenerBienUseCase
@inject ObtenerPublicacionDeUseCase ObtenerPublicacion
@inject NavigationManager NavigationManager
@inject ApiCaller ApiCaller
@inject ObtenerApplicationUserUseCase ObtenerApplicationUserUseCase
@inject ObtenerEmbarcacionUseCase ObtenerEmbarcacionUseCase
@inject  AgregarTruequeConfirmadoUseCase AgregarTruequeConfirmadoUseCase
@inject IDialogService Dialog

<MudDialogProvider />

<MudDialog>
    
    <DialogContent>
        @if (!_confirmacionEnCurso)
        {
            <div class="card-container">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Bien a intercambiar: @Bien!.Nombre</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudImage Fluid="true" Src="@Bien!.Imagen" Alt="Image"/>
                        <MudText Typo="Typo.h6">Descripcion: @Bien.Descripcion</MudText>
                    </MudCardContent>
                </MudCard>
            </div>
            <div class="card-container">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Publicacion: @Publicacion!.Titulo</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudImage Fluid="true" Src="@Publicacion!.Image" Alt="Image"/>
                        <MudText Typo="Typo.h6">Descripcion: @Publicacion!.Descripcion</MudText>
                    </MudCardContent>
                </MudCard>
            </div>
        }
        else
        {
            @_resultadoApi
        }
        
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Style="margin-left: auto">Cerrar</MudButton>
        <div style="flex-grow: 1;"></div>
        @if (!_confirmacionEnCurso)
        {
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Check"
                       Size="Size.Small"
                       OnClick="()=>ConfirmarTrueque(_usuarioPublicacion, _usuarioBien, _embarcacionUsuario, Bien, Oferta, Publicacion)"> Confirmar Trueque
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       OnClick="RetrotraerTrueque"
                       Color="Color.Primary" StartIcon="@Icons.Material.Filled.Redo"
                       Size="Size.Small"> Retrotraer Trueque
            </MudButton>
        }
        
    </DialogActions>
</MudDialog>

@code {
    bool _confirmacionExitosa; 
    bool _confirmacionEnCurso;
    [Parameter] public Oferta Oferta { get; set; }
    [Parameter] public Publicacion Publicacion { get; set; } = null!;
    [Parameter] public Bien Bien { get; set; } = null!;
    
    
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    void Cancel()
    {
        MudDialog!.Cancel();
        if(_confirmacionExitosa)
            NavigationManager.Refresh(forceReload:true);
    }

    
    ApplicationUser _usuarioBien; 
    ApplicationUser _usuarioPublicacion;
    Embarcacion _embarcacionUsuario;
    
    Inhabilitaciones _InhabilitacionesDuenioEmbarcacion;
    Inhabilitaciones _InhabilitacionesOfertante;
    
    string _resultadoApi = "Cargando...";
    string _textoTitulo = "Viendo Datos del Trueque";
    protected override void OnInitialized()
    {
        _usuarioBien = ObtenerApplicationUserUseCase.Ejecutar(Bien.UsuarioId);
        _embarcacionUsuario = ObtenerEmbarcacionUseCase.Ejecutar(Publicacion.EmbarcacionId);
        _usuarioPublicacion = ObtenerApplicationUserUseCase.Ejecutar(_embarcacionUsuario.ClienteId);
    }
    public void RetrotraerTrueque()
    {
        RetrotraerTruequeUseCase.Ejecutar(Oferta.Id);
        NavigationManager.NavigateTo("/ListadoTruequesAcordados", forceLoad:true);
    }

    public async Task ConfirmarTrueque(ApplicationUser usuarioPub, ApplicationUser usuarioBien, Embarcacion barco, Bien bien, Oferta oferta, Publicacion publicacion)
    {

        _confirmacionEnCurso = true;
        MudDialog.SetTitle("Confirmando trueque");
        try
        {
            _InhabilitacionesDuenioEmbarcacion = new Inhabilitaciones(
                await ApiCaller.EstaDuenioInhibido(_usuarioPublicacion.Dni.Value),
                await ApiCaller.EstaBienInhabilitado(_embarcacionUsuario.Matricula),
                !(await ApiCaller.EsDuenioDe(_usuarioPublicacion.Dni.Value, _embarcacionUsuario.Matricula)));
            //checkeos del que pone la embarcacion
            // resultadoApi = (await ApiCaller.EstaDuenioInhibido(_usuarioPublicacion.Dni.Value)).ToString();
            // await ApiCaller.EstaBienInhabilitado();
            // await ApiCaller.EsDuenioDe();
            _resultadoApi = $"El usuario {_usuarioPublicacion.Nombre}, con la embarcación {_embarcacionUsuario.Nombre} {_InhabilitacionesDuenioEmbarcacion.MensajeError()}";
            // Console.WriteLine("primer checkeo hecho");
            //
            if (!_InhabilitacionesDuenioEmbarcacion.AlgunError())
            {
                // _InhabilitacionesOfertante = new Inhabilitaciones(await ApiCaller.EstaDuenioInhibido(_usuarioBien.Dni.Value), false, false);
                // _resultadoApi +=  $"{Environment.NewLine} El usuario {_usuarioBien.Nombre}, dueño del bien {Bien.Nombre} {_InhabilitacionesOfertante.MensajeError()}";

                _resultadoApi = "Ninguna inhabilitación detectada. El trueque se confirmó con éxito.";
                AgregarTruequeConfirmadoUseCase.Ejecutar(new TruequeConfirmado(bien.Id,publicacion.Id));
                _confirmacionExitosa = true;
            }
            //checkeos del que pone el bien, los ultimos 2 se van a ver en 3ra demo
            // await ApiCaller.EstaDuenioInhibido();
            // await ApiCaller.EstaBienInhabilitado();
            // await ApiCaller.EsDuenioDe();

            Console.WriteLine(_resultadoApi);
        }

        catch (HttpRequestException)
        {
            _resultadoApi = "No se pudo establecer conexión con el servidor";
        }
        catch (TaskCanceledException)
        {
            _resultadoApi = "Se estableció conexion con el servidor pero este no respondió";
        }
        catch(Exception e)
        {
            _resultadoApi = $"Problemas de conexion: {e.Message}";
        }
        
    }
}
<style>.card-container {
        margin-bottom: 16px;
    }
</style>
