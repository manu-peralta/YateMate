@page "/ListarApplicationUsers"
@using YateMate.Aplicacion.UseCases.ApplicationUser
@using YateMate.Components.Account
@using YateMate.Components.Account.Shared
@inject IdentityUserAccessor UserAccessor
@inject ObtenerClientesUseCase ObtenerClientesUseCase
@inject EliminarApplicationUserUseCase EliminarApplicationUserUseCase
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<DialogoConfirmacion @ref="_dialogo" OnConfirmado="EliminarApplicationUser" />

<h1>Listado de clientes</h1>
<title>Listado de clientes</title>

<MudContainer>
    @if (!_tieneElementos)
    {
    <MudText Typo="Typo.h6">No hay elementos</MudText>
    }
    else
    {
    <MudTable Items="@_lista" Class="mt-4" Dense="true" Outlined="true">
        <HeaderContent>
            <MudTh>Email</MudTh>
            <MudTh>Nombre</MudTh>
            <MudTh>Apellido</MudTh>
            <MudTh>Nacionalidad</MudTh>
            <MudTh>Genero</MudTh>
            <MudTh>DNI</MudTh>
            <MudTh>Fecha de nacimiento</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Email</MudTd>
            <MudTd>@context.Nombre</MudTd>
            <MudTd>@context.Apellido</MudTd>
            <MudTd>@context.Nacionalidad</MudTd>
            <MudTd>@context.Genero</MudTd>
            <MudTd>@context.Dni</MudTd>
            <MudTd>@context.FechaNacimiento!.Value.ToString("dd-MM-yyyy")</MudTd>
            <MudTd>
                <div class="button-container">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ListarEmbarcaciones(context.Id))">Listar embarcaciones</MudButton>
                </div>
                <div class="button-container">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => AgregarEmbarcacion(context.Id))">Agregar Embarcaci√≥n</MudButton>
                </div>
                <div class="button-container">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => NavigationManager.NavigateTo("listarAmarras/"+@context.Id))">Listar amarras</MudButton>
                </div>
                <div class="button-container">
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => ConfirmarEliminacion(context))">Eliminar Usuario</MudButton>
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
    }
</MudContainer>
    

@code {
    
    List<ApplicationUser> _lista = new List<ApplicationUser>();
    bool _tieneElementos = false;
    
    protected override void OnInitialized()
    {
        _lista = ObtenerClientesUseCase.Ejecutar();
    }
    protected override void OnParametersSet()
    {
        if(_lista.Count > 0) 
        {
            _tieneElementos = true;

        }
    }
    
    ApplicationUser? _userAEliminar = null;
    private void EliminarApplicationUser()
    {
        EliminarApplicationUserUseCase.Ejecutar(_userAEliminar!.Id);
        _lista = ObtenerClientesUseCase.Ejecutar();
        _tieneElementos = _lista.Count > 0;
    }

    private void AgregarEmbarcacion(string id)
    {
        NavigationManager.NavigateTo($"/AgregarEmbarcacionACliente/{id}");
    }

    private void ListarEmbarcaciones(string id)
    {
        NavigationManager.NavigateTo($"/listadoembarcaciones/{id}");
    }
    
    DialogoConfirmacion _dialogo = null!;
    void ConfirmarEliminacion(ApplicationUser user)
    {
        _userAEliminar = user;
        _dialogo.Mensaje = $"Deseas eliminar al cliente {user.Nombre} ?";
        _dialogo.Mostrar();
    }
        
}

<style>
    .button-container {
        margin-bottom: 10px;
    }
</style>