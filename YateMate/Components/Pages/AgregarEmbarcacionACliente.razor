@page "/AgregarEmbarcacionACliente/{Id}"
@using System.ComponentModel.DataAnnotations
@using YateMate.Aplicacion.UseCases.Embarcaciones
@using YateMate.Components.Account.Pages
@inject AgregarEmbarcacionUseCase AgregarEmbarcacionUseCase
@inject NavigationManager Navegador;
@inject ObtenerEmbarcacionPorMatriculaUseCase ObtenerEmbarcacionPorMatriculaUseCase

@* @rendermode InteractiveServer *@

<h1>Agregar Embarcacion</h1>

<EditForm OnSubmit="HandleSubmit" EditContext="editContext" FormName="AgregarEmbarcacion">
    <CustomValidator @ref="customValidator"></CustomValidator>
    <div class="form-floating mb-3">
        <InputText class="form-control" id="nombre" @bind-Value="Model.Nombre"/>
        <label for="nombre">Nombre</label>
        <ValidationMessage For="() => Model.Nombre" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputNumber step="0.1" class="form-control" id="eslora" @bind-Value="Model.Eslora" />
        <label for="eslora">Eslora</label>
        <ValidationMessage For="() => Model.Eslora" class="text-danger" />
        
    </div>
    <div class="form-floating mb-3">
        <InputNumber step="0.1" class="form-control" id="calado" @bind-Value="Model.Calado" />
        <label for="calado">Calado</label>
        <ValidationMessage For="() => Model.Calado" class="text-danger" />
    </div>

    <div class="form-floating mb-3">
        <InputNumber type="number" step="0.1" class="form-control" id="manga" @bind-Value="Model.Manga" />
        <label for="manga">Manga</label>
        <ValidationMessage For="() => Model.Manga" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputSelect step="0.1" class="form-control" id="bandera" @bind-Value="Model.Bandera"  TValue="Nacionalidad?" aria-required="true">
        <option value=""></option>
        @foreach (Nacionalidad nacionalidad in Enum.GetValues(typeof(Nacionalidad)))
        {
        <option value=@nacionalidad> @nacionalidad </option>
        }
        </InputSelect>
        <label for="bandera">Bandera</label>
        <ValidationMessage For="() => Model.Bandera" class="text-danger" />
    </div>
    
    <div class="form-floating mb-3">
        <InputText class="form-control" id="matricula" @bind-Value="Model.Matricula" />
        <label for="matricula">Matricula</label>
        <ValidationMessage For="() => Model.Matricula" class="text-danger" />
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Cargar embarcacion</button>
</EditForm>
    
@code 
{
    [Parameter] public string Id { get; set; } = null!;
    
    public Embarcacion? barco { get; set; }
    
    [SupplyParameterFromForm] private InputModel Model { get; set; } = new();
    
    private EditContext? editContext;

    public CustomValidator customValidator;
    
    protected override void OnInitialized()
    {
        Model ??= new ();
        Model.ClienteId = Id;
        editContext = new(Model);
    }

    public void HandleSubmit()
    {
        var errors = new Dictionary<string, List<string>>();
        Model.ClienteId = Id;
        foreach (var property in Model.GetType().GetProperties()) //me cago en microsoft
        {
            // Console.WriteLine(property.Name);
            var value = property.GetValue(Model);
            // Console.WriteLine(property.Name);
            if (String.IsNullOrWhiteSpace(value?.ToString()))
            {
                Console.WriteLine($"el campo {property.Name} estaba vacio");
                errors.Add(property.Name, new List<string>() {"Este campo es obligatorio"});
            }

            // if (property.GetValue(Model)?.GetType().ToString() != "System.String")
            // {
            //     
            // }
            
        }
        
        if (errors.Count > 0)
        {
            Console.WriteLine($"hay {errors.Count} errores");
            foreach (var error in errors)
            {
                Console.WriteLine($"error {error.Key} {error.Value}");
            }
            customValidator.DisplayErrors(errors);
            return;
        }
        
        if (ObtenerEmbarcacionPorMatriculaUseCase.Ejecutar(Model.Matricula) is not null)
        {
            
            errors.Add("Matricula", new List<string>(){"Esta matricula ya esta en uso"});
            customValidator.DisplayErrors(errors);
            return;
        }
        
        ValidSubmit();
    }
    public void ValidSubmit()
    {
        Model.ClienteId = Id;
        Embarcacion emb = new Embarcacion(Model.Nombre, Model.Eslora.Value, Model.Calado.Value, Model.ClienteId, Model.Matricula, Model.Manga.Value);
        emb.Bandera = Model.Bandera.Value;
        AgregarEmbarcacionUseCase.Ejecutar(emb);
        Navegador.NavigateTo("/ListarApplicationUsers");
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Ingresa un nombre")]
        [Display(Name = "Nombre")]
        public string? Nombre { get; set; } = null;
        
        [Required(ErrorMessage = "Ingresa una eslora")]
        [Display(Name = "Eslora")]
        public double? Eslora { get; set; } = null!;
        
        [Required(ErrorMessage = "Ingresa un calado")]
        [Display(Name = "Calado")]
        public double? Calado { get; set; } = null!;
        
        [Required(ErrorMessage = "Ingresa una manga")]
        [Display(Name = "Manga")]
        public double? Manga { get; set; }
        
        [Required(ErrorMessage = "Ingresa una bandera")]        
        [Display(Name = "Bandera")]
        public Nacionalidad? Bandera { get; set; }

        [Required(ErrorMessage = "Ingresa una matricula")]
        [Display(Name = "Matricula")]
        public string? Matricula { get; set; } = null;
        
        public string? ClienteId { get; set; } = null;
        
    }
    
}

