@page "/ListadoMisReservas"

@rendermode InteractiveServer
@using YateMate.Aplicacion.UseCases.Amarras
@using YateMate.Components.Shared
@using YateMate.Aplicacion.UseCases.Reserva
@using YateMate.Aplicacion.UseCases.Subalquiler
@inject ListarReservasDeUseCase ListarReservasDeUseCase
@inject ObtenerDuenioSubalquilerUseCase ObtenerDuenioSubalquilerUseCase
@inject ObtenerSubalquilerUseCase ObtenerSubalquilerUseCase
@inject ObtenerAmarraUseCase ObtenerAmarraUseCase
@inject IDialogService Dialog
@inject NavigationManager Navegador;

<MudDialogProvider  FullWidth="true"
                    MaxWidth="MaxWidth.Small"
                    Position="DialogPosition.CenterLeft"/>

<h1>Mis reservas</h1>
<title>Mis reservas</title>

@if (!_tieneElementos)
{
    <h2>No tiene reservas vigentes.</h2>
}
else
{
    <MudPaper Width="100%" Class="darkbackground" MinHeight="350" Style="border: none; box-shadow: none;">
        <MudContainer>
            <MudGrid>
                @foreach (var reserva in _lista)
                {
                    subalquiler = ObtenerSubalquilerUseCase.Ejecutar(reserva.SubalquilerId);
                    duenio = ObtenerDuenioSubalquilerUseCase.Ejecutar(subalquiler.IdDuenio);
                    <MudItem xs="4" Style="display:flex;">
                        <MudPaper Width="100%" Square="false" Class="pa-15 ma-2 infobox" Style="border: none; box-shadow: none;">
                            <MudCard>
                                <MudCardContent>
                                    <MudStack Spacing="2" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.h6" Align="Align.Center">
                                            Amarra con ubicacion: @(ObtenerAmarraUseCase.Ejecutar( ObtenerSubalquilerUseCase.Ejecutar(reserva.SubalquilerId).IdAmarra).Ubicacion)
                                        </MudText>
                                        <MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Info" Size="Size.Large" />
                                        <MudText Typo="Typo.body2" Align="Align.Center">
                                            @duenio.Nombre @duenio.Apellido
                                        </MudText>
                                        <MudDivider />
                                        <MudText Typo="Typo.body2" Align="Align.Center">
                                            Desde: @reserva.FechaInicio.ToString("d")
                                        </MudText>
                                        <MudText Typo="Typo.body2" Align="Align.Center">
                                            Hasta: @reserva.FechaFin.ToString("d")
                                        </MudText>
                                    </MudStack>
                                </MudCardContent>
                                <MudCardActions Style="justify-content: center;">
                                    <MudButton Variant="Variant.Text" @onclick="@(() => OpenDialog(reserva, subalquiler))" Color="Color.Primary">Ver m√°s</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
    </MudPaper>
}

@code {
    [Parameter] public int? Id { get; set; }
    List<Reserva> _lista = new List<Reserva>();
    Reserva? _reservaParaCancelar;
    bool _tieneElementos;

    Subalquiler subalquiler;
    ApplicationUser duenio;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private string? _userId;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState.User;
            _userId = user.Claims.FirstOrDefault()?.Value;
            _lista = ListarReservasDeUseCase.Ejecutar(_userId!);
        }
    }

    protected override void OnParametersSet()
    {
        if (_lista.Count > 0)
        {
            _tieneElementos = true;
        }
    }

    [Inject] private IDialogService? DialogService { get; set; }
    
    private void OpenDialog(Reserva reserva , Subalquiler subalquiler)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<VerDatosReserva>();
        parameters.Add(x => x.Reserva, reserva);
        parameters.Add(x => x.Subalquiler, subalquiler);
        Dialog.Show<VerDatosReserva>("Ver Datos", parameters);
    }

}